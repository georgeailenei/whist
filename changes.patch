diff --git a/.gitignore b/.gitignore
index b0b6f3a..36f8d92 100644
--- a/.gitignore
+++ b/.gitignore
@@ -58,7 +58,7 @@ cover/
 # Django stuff:
 *.log
 local_settings.py
-db.sqlite3
+src/db.sqlite3
 db.sqlite3-journal
 
 # Flask stuff:
diff --git a/poetry.lock b/poetry.lock
index 6a28018..ca2ba02 100644
--- a/poetry.lock
+++ b/poetry.lock
@@ -97,6 +97,17 @@ python-versions = ">=3.7"
 [package.dependencies]
 Django = ">=3.2"
 
+[[package]]
+name = "django-extensions"
+version = "3.2.1"
+description = "Extensions for Django"
+category = "main"
+optional = false
+python-versions = ">=3.6"
+
+[package.dependencies]
+Django = ">=3.2"
+
 [[package]]
 name = "djangorestframework"
 version = "3.14.0"
@@ -109,6 +120,17 @@ python-versions = ">=3.6"
 django = ">=3.0"
 pytz = "*"
 
+[[package]]
+name = "execnet"
+version = "1.9.0"
+description = "execnet: rapid multi-Python deployment"
+category = "main"
+optional = false
+python-versions = ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*"
+
+[package.extras]
+testing = ["pre-commit"]
+
 [[package]]
 name = "executing"
 version = "1.1.1"
@@ -380,6 +402,23 @@ pytest = ">=5.4.0"
 docs = ["sphinx", "sphinx-rtd-theme"]
 testing = ["Django", "django-configurations (>=2.0)"]
 
+[[package]]
+name = "pytest-xdist"
+version = "3.0.2"
+description = "pytest xdist plugin for distributed testing and loop-on-failing modes"
+category = "main"
+optional = false
+python-versions = ">=3.6"
+
+[package.dependencies]
+execnet = ">=1.1"
+pytest = ">=6.2.0"
+
+[package.extras]
+psutil = ["psutil (>=3.0)"]
+setproctitle = ["setproctitle"]
+testing = ["filelock"]
+
 [[package]]
 name = "pytz"
 version = "2022.6"
@@ -613,7 +652,7 @@ test = ["zope.security", "zope.testrunner"]
 [metadata]
 lock-version = "1.1"
 python-versions = "^3.10"
-content-hash = "39d02f2220c7dc14f1a738ed48894804d553a802f05472692b253dcd5df35ff3"
+content-hash = "fa96bdae4f004d7a5c01eb725feb580df63de955e00aa69c993cbf97571be09e"
 
 [metadata.files]
 appnope = [
@@ -652,10 +691,18 @@ django-cors-headers = [
     {file = "django-cors-headers-3.13.0.tar.gz", hash = "sha256:f9dc6b4e3f611c3199700b3e5f3398c28757dcd559c2f82932687f3d0443cfdf"},
     {file = "django_cors_headers-3.13.0-py3-none-any.whl", hash = "sha256:37e42883b5f1f2295df6b4bba96eb2417a14a03270cb24b2a07f021cd4487cf4"},
 ]
+django-extensions = [
+    {file = "django-extensions-3.2.1.tar.gz", hash = "sha256:2a4f4d757be2563cd1ff7cfdf2e57468f5f931cc88b23cf82ca75717aae504a4"},
+    {file = "django_extensions-3.2.1-py3-none-any.whl", hash = "sha256:421464be390289513f86cb5e18eb43e5dc1de8b4c27ba9faa3b91261b0d67e09"},
+]
 djangorestframework = [
     {file = "djangorestframework-3.14.0-py3-none-any.whl", hash = "sha256:eb63f58c9f218e1a7d064d17a70751f528ed4e1d35547fdade9aaf4cd103fd08"},
     {file = "djangorestframework-3.14.0.tar.gz", hash = "sha256:579a333e6256b09489cbe0a067e66abe55c6595d8926be6b99423786334350c8"},
 ]
+execnet = [
+    {file = "execnet-1.9.0-py2.py3-none-any.whl", hash = "sha256:a295f7cc774947aac58dde7fdc85f4aa00c42adf5d8f5468fc630c1acf30a142"},
+    {file = "execnet-1.9.0.tar.gz", hash = "sha256:8f694f3ba9cc92cab508b152dcfe322153975c29bda272e2fd7f3f00f36e47c5"},
+]
 executing = [
     {file = "executing-1.1.1-py2.py3-none-any.whl", hash = "sha256:236ea5f059a38781714a8bfba46a70fad3479c2f552abee3bbafadc57ed111b8"},
     {file = "executing-1.1.1.tar.gz", hash = "sha256:b0d7f8dcc2bac47ce6e39374397e7acecea6fdc380a6d5323e26185d70f38ea8"},
@@ -740,6 +787,10 @@ pytest-django = [
     {file = "pytest-django-4.5.2.tar.gz", hash = "sha256:d9076f759bb7c36939dbdd5ae6633c18edfc2902d1a69fdbefd2426b970ce6c2"},
     {file = "pytest_django-4.5.2-py3-none-any.whl", hash = "sha256:c60834861933773109334fe5a53e83d1ef4828f2203a1d6a0fa9972f4f75ab3e"},
 ]
+pytest-xdist = [
+    {file = "pytest-xdist-3.0.2.tar.gz", hash = "sha256:688da9b814370e891ba5de650c9327d1a9d861721a524eb917e620eec3e90291"},
+    {file = "pytest_xdist-3.0.2-py3-none-any.whl", hash = "sha256:9feb9a18e1790696ea23e1434fa73b325ed4998b0e9fcb221f16fd1945e6df1b"},
+]
 pytz = [
     {file = "pytz-2022.6-py2.py3-none-any.whl", hash = "sha256:222439474e9c98fced559f1709d89e6c9cbf8d79c794ff3eb9f8800064291427"},
     {file = "pytz-2022.6.tar.gz", hash = "sha256:e89512406b793ca39f5971bc999cc538ce125c0e51c27941bef4568b460095e2"},
@@ -805,7 +856,6 @@ wcwidth = [
     {file = "zope.hookable-5.3-cp310-cp310-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_12_x86_64.manylinux2010_x86_64.whl", hash = "sha256:2d277c9e44b8acf2703ec7bca0c8e1ee1078155811618850521cb8465d35194f"},
     {file = "zope.hookable-5.3-cp310-cp310-win32.whl", hash = "sha256:05997395234ce99a5619c60a3afcb7b51f4ae67c90945845320d6cba993c1b98"},
     {file = "zope.hookable-5.3-cp310-cp310-win_amd64.whl", hash = "sha256:ec6e3db2eb76a62e33767b6689cde22981003ea14ac6f91b353361bf5dafc2d6"},
-    {file = "zope.hookable-5.3-cp311-cp311-macosx_10_9_universal2.whl", hash = "sha256:a5025e8846ba41496d5a082b3a175c9a812afc14b2f134e348aa714958158565"},
     {file = "zope.hookable-5.3-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:993e2f94a83971c6e9083a580a356ba6c52a0d74afe5d5c1e1850a05c8ee6bba"},
     {file = "zope.hookable-5.3-cp311-cp311-win32.whl", hash = "sha256:e1685b41aa8dc71fcb79868d9f42b35e6e4219412832e4404db9d172aae266a6"},
     {file = "zope.hookable-5.3-cp311-cp311-win_amd64.whl", hash = "sha256:f0458a636faca189af26e963d7987b2714dd6ca0dab3a249c47327a993a7a706"},
@@ -847,7 +897,6 @@ wcwidth = [
     {file = "zope.interface-5.5.1-cp310-cp310-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_12_x86_64.manylinux2010_x86_64.whl", hash = "sha256:a6f51ffbdcf865f140f55c484001415505f5e68eb0a9eab1d37d0743b503b423"},
     {file = "zope.interface-5.5.1-cp310-cp310-win32.whl", hash = "sha256:8de7bde839d72d96e0c92e8d1fdb4862e89b8fc52514d14b101ca317d9bcf87c"},
     {file = "zope.interface-5.5.1-cp310-cp310-win_amd64.whl", hash = "sha256:90f611d4cdf82fb28837fe15c3940255755572a4edf4c72e2306dbce7dcb3092"},
-    {file = "zope.interface-5.5.1-cp311-cp311-macosx_10_9_universal2.whl", hash = "sha256:d2f2ec42fbc21e1af5f129ec295e29fee6f93563e6388656975caebc5f851561"},
     {file = "zope.interface-5.5.1-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:489c4c46fcbd9364f60ff0dcb93ec9026eca64b2f43dc3b05d0724092f205e27"},
     {file = "zope.interface-5.5.1-cp311-cp311-win32.whl", hash = "sha256:9ad58724fabb429d1ebb6f334361f0a3b35f96be0e74bfca6f7de8530688b2df"},
     {file = "zope.interface-5.5.1-cp311-cp311-win_amd64.whl", hash = "sha256:a69f6d8b639f2317ba54278b64fef51d8250ad2c87acac1408b9cc461e4d6bb6"},
diff --git a/pyproject.toml b/pyproject.toml
index c3e242e..08edbfd 100644
--- a/pyproject.toml
+++ b/pyproject.toml
@@ -15,6 +15,8 @@ vue = "^0.0.1"
 node = "^1.1"
 djangorestframework = "^3.14.0"
 django-cors-headers = "^3.13.0"
+pytest-xdist = "^3.0.2"
+django-extensions = "^3.2.1"
 
 
 [build-system]
diff --git a/src/manage.py b/src/manage.py
index ac2f90c..f9c7be7 100755
--- a/src/manage.py
+++ b/src/manage.py
@@ -19,4 +19,5 @@ def main():
 
 
 if __name__ == '__main__':
+    # print(os.listdir('.'))
     main()
diff --git a/src/pytest.ini b/src/pytest.ini
index 7a88d5a..dfb38fb 100644
--- a/src/pytest.ini
+++ b/src/pytest.ini
@@ -1,5 +1,7 @@
 [pytest]
 DJANGO_SETTINGS_MODULE = website.settings
-addopts = -v
-testpaths = Tests
+addopts =
+    -v
+    --color=yes
+testpaths = tests
 python_files = test_*.py
diff --git a/src/room/controllers/room_controller.py b/src/room/controllers/room_controller.py
index 24732a4..66af50b 100644
--- a/src/room/controllers/room_controller.py
+++ b/src/room/controllers/room_controller.py
@@ -1,5 +1,3 @@
-
-
 class Controller:
     def check_user(self, user, card_room):
         players = card_room.players.all()
@@ -23,18 +21,11 @@ class Controller:
     def check_players_num(self, card_rooms):
         return card_rooms.players.count()
 
-    def get_players_names(self, card_room):
-        players = [player for player in card_room.players.all()]
-        return players
-
     def remove_player(self, user, card_room):
         card_room.players.remove(user)
         card_room.players_count = card_room.players.count()
         card_room.save()
 
-    def get_room_status(self, card_room):
-        return card_room.status
-
     def change_status_to_false(self, card_room):
         card_room.status = False
         card_room.save()
diff --git a/src/room/game_logic.py b/src/room/game_logic.py
index 1272044..17c0e85 100644
--- a/src/room/game_logic.py
+++ b/src/room/game_logic.py
@@ -1,5 +1,4 @@
-from entity import Deck, Card
-import random
+from room.entities import Deck, Card
 
 
 class GameController:
@@ -7,26 +6,13 @@ class GameController:
         self.card_validator = card_validator
         self.repository = repository
 
-    def load_game(self, room):
-        content = self.repository.load_game_stats(room)
-        return {
-            'board': content['board'],
-            'trump_card': content['trump_card'],
-            'score1': content['score1'],
-            'score2': content['score2'],
-            'player_pos': content['player_pos'],
-            'played_card': content['played_card'],
-            'players': content['players'],
-            'removed_players_cards': content['removed_players_cards'],
-        }
-
     def check_card(self, card):
         return self.card_validator.check_card(card)
 
     def save_card(self, card, room):
         self.repository.save_played_card(card, room)
 
-    def score_limit(self, team_one_score, team_two_score):
+    def game_ended(self, team_one_score, team_two_score):
         if team_one_score < 5 and team_two_score < 5:
             return True
         elif team_one_score >= 5 or team_two_score >= 5:
@@ -38,14 +24,6 @@ class GameController:
             total += len(player.hand)
         return total
 
-    def mix_cards(self, cards):
-        deck = cards.copy()
-        random.shuffle(deck)
-        return deck
-
-    def get_shuffled_cards(self):
-        return self.mix_cards(Deck.cards)
-
     def spread_cards(self, cards, players):
         i = 0
         hands = [[], [], [], []]
@@ -67,22 +45,6 @@ class GameController:
             if last_suit == suit_abv:
                 return suit_name
 
-    def save_game_stats(self, room, game_stats):
-        players = game_stats['players']
-        board = " ".join(str(card) for card in game_stats['board'])
-        trump_card = game_stats['trump_card']
-        team_one_score = game_stats['score1']
-        team_two_score = game_stats['score2']
-        player_position = game_stats['player_pos']
-        played_card = game_stats['played_card']
-        hands = [p.hand for p in players]
-        tricks = [p.tricks for p in players]
-        played_cards = [p.played_hand for p in players]
-        return self.repository.save_game_stats(
-            room, board, trump_card, team_one_score, team_two_score,
-            player_position, played_card, hands, tricks, played_cards
-        )
-
     def total_tricks_completed(self, players):
         all_tricks = [player.tricks for player in players]
         if sum(all_tricks) != 13:
@@ -133,10 +95,6 @@ class GameController:
                 player.hand = player.hand.replace(str(card), "")
         return players
 
-    def display_board(self, board):
-        the_board = [str(card) for card in board]
-        return " ".join(the_board)
-
     def board_full(self, board):
         if len(board) == 4:
             return True
@@ -265,119 +223,60 @@ class GameController:
             player.played_hand = ""
         return players
 
-    def run(self, form, room, user):
-        game_stats = self.load_game(room)
-
-        # Game Stats
-        players = game_stats['players']
-        board = game_stats['board'].split()
-        score_one = game_stats['score1']
-        score_two = game_stats['score2']
-        player_pos = game_stats['player_pos']
-        permission1, permission2, permission3, permission4 = False, False, False, False
-
-        if user == players[0]:
-            permission1 = True
-        elif user == players[1]:
-            permission2 = True
-        elif user == players[2]:
-            permission3 = True
-        elif user == players[3]:
-            permission4 = True
+    def run(self, room, user):
+        # game_stats = self.load_game(room)
+        room_stats = self.repository.get_room_stats(room)
+        players = room.players.all()
+        board = room_stats.board.split()
 
         if board == [""]:
             self.clear_board(board)
 
-        current_player_pos = player_pos
-        if current_player_pos == 4:
-            current_player_pos = 0
+        if room_stats.player_position == 4:
+            room_stats.player_position = 0
 
-        if self.score_limit(score_one, score_two):
-            if self.players_cards_count(players) == 0:
-                cards = self.get_shuffled_cards()
+        if self.game_ended(room_stats.team_one_score, room_stats.team_two_score):
+            game_not_started = self.players_cards_count(players) == 0
+            one_set_is_finished = self.total_tricks_completed(players) is False
+
+            if game_not_started:
+                cards = Deck().cards
                 players = self.spread_cards(cards, players)
-                game_stats['trump_card'] = self.find_trump_card(cards)
-                self.save_game_stats(room, game_stats)
-
-            elif self.total_tricks_completed(players) is False:
-                card = game_stats['played_card']
-                trump_card = game_stats['trump_card']
-
-                if card != "":
-                    if self.correct_card(card, players, board, current_player_pos, trump_card):
-                        board = self.add_to_board(card, board)
-                        players = self.remove_card_from_player(card, players)
-                        current_player_pos += 1
-
-                        if self.board_full(board):
-                            print("ceva")
-                            winner_card = self.compare_cards_rank(board, trump_card)
-                            winner = self.find_winner(winner_card, players)
-                            players = self.add_trick_to_player(winner, players)
-                            current_player_pos = self.winner_table_position(winner, players)
-                            self.clear_board(board)
-                        # SAVE
-                        game_stats['players'] = players
-                        game_stats['board'] = board
-                        game_stats['score1'] = score_one
-                        game_stats['score2'] = score_two
-                        game_stats['player_pos'] = current_player_pos
-                        self.save_game_stats(room, game_stats)
-
-        if self.total_tricks_completed(players) is True:
-            scores = self.update_score(score_one, score_one, players)
+                room_stats.trump_card = self.find_trump_card(cards)
+
+            elif one_set_is_finished:
+                if (
+                        room_stats.played_card != ""
+                        and self.correct_card(room_stats.played_card, players, board, room_stats.player_position, room_stats.trump_card)
+                ):
+                    board = self.add_to_board(room_stats.played_card, board)
+                    players = self.remove_card_from_player(room_stats.played_card, players)
+                    room_stats.player_position += 1
+
+                    if self.board_full(board):
+                        winner_card = self.compare_cards_rank(board, room_stats.trump_card)
+                        winner = self.find_winner(winner_card, players)
+                        players = self.add_trick_to_player(winner, players)
+                        room_stats.player_position = self.winner_table_position(winner, players)
+                        self.clear_board(board)
+
+        if self.total_tricks_completed(players):
+            scores = self.update_score(room_stats.team_one_score, room_stats.team_one_score, players)
             self.reset_players_cards_and_tricks(players)
 
-            # SAVE
-            game_stats['players'] = players
-            game_stats['board'] = board
-            game_stats['score1'] = scores[0]
-            game_stats['score2'] = scores[1]
-            game_stats['player_pos'] = current_player_pos
-            self.save_game_stats(room, game_stats)
+            room_stats.team_one_score = scores[0]
+            room_stats.team_two_score = scores[1]
 
-            if self.players_cards_count(players) == 0 and self.score_limit(score_one, score_two):
-                cards = self.get_shuffled_cards()
+            if self.players_cards_count(players) == 0 and self.game_ended(room_stats.team_one_score, room_stats.team_two_score):
+                cards = Deck().cards
                 players = self.spread_cards(cards, players)
-                game_stats['trump_card'] = self.find_trump_card(cards)
-                game_stats['players'] = players
-                self.save_game_stats(room, game_stats)
+                room_stats.trump_card = self.find_trump_card(cards)
             else:
                 #  SHOW WINNER
                 pass
 
         # RESULTS
-        game_stats = self.load_game(room)
-        board = self.display_board(board)
-        trump_card = game_stats['trump_card']
-        score_one = game_stats['score1']
-        score_two = game_stats['score2']
-
-        content = {
-            'form': form,
-            # Players
-            'player1': players[0],
-            'player2': players[1],
-            'player3': players[2],
-            'player4': players[3],
-
-            # GAME STATS
-            'board': board,
-            'trump_card': trump_card,
-            'team_1_score': score_one,
-            'team_2_score': score_two,
-
-            # HTML ELEMENTS
-            'table_status': False,
-            'game_status': True,
-            'register': False,
-            'cancel': False,
-            'countdown': False,
-            'timer': "0",
-            'permission1': permission1,
-            'permission2': permission2,
-            'permission3': permission3,
-            'permission4': permission4,
-        }
-        return content
+        self.repository.save_game_stats(
+            room_stats, board
+        )
 
diff --git a/src/room/models.py b/src/room/models.py
index b7a65bd..f256299 100644
--- a/src/room/models.py
+++ b/src/room/models.py
@@ -1,3 +1,5 @@
+from random import shuffle
+
 from django.db import models
 from userauth.models import User
 
diff --git a/src/room/repos/database_repo.py b/src/room/repos/database_repo.py
index e7922b1..53c5270 100644
--- a/src/room/repos/database_repo.py
+++ b/src/room/repos/database_repo.py
@@ -10,35 +10,16 @@ class GameData:
         elif room in all_room_stats:
             values = Stats.objects.filter(room=room).values()
             return Stats.objects.get(pk=values[0]['id'])
+    def convert_board(self, board):
+        return " ".join(str(card) for card in board)
 
-    def load_game_stats(self, room):
-        room_stats = self.get_room_stats(room)
+    def save_game_stats(self, room_stats, board):
         players = room_stats.room.players.all()
-        played_hands = [p.played_hand.split() for p in players]
-        return {
-                'board': room_stats.board,
-                'trump_card': room_stats.trump_card,
-                'score1': room_stats.team_one_score,
-                'score2': room_stats.team_two_score,
-                'player_pos': room_stats.player_position,
-                'played_card': room_stats.played_card,
-                'players': players,
-                'removed_players_cards': played_hands,
-                }
+        room_stats.board = self.convert_board(board)
 
-    def save_game_stats(self,
-                        room, board, trump_card, team_one_score, team_two_score,
-                        player_position, played_card, hands, tricks, played_cards
-                        ):
-        self.remove_all_stats(room)
-        room_stats = self.get_room_stats(room)
-        players = room_stats.room.players.all()
-        room_stats.board = board
-        room_stats.trump_card = trump_card
-        room_stats.team_one_score = team_one_score
-        room_stats.team_two_score = team_two_score
-        room_stats.player_position = player_position
-        room_stats.played_card = played_card
+        hands = [p.hand for p in players]
+        tricks = [p.tricks for p in players]
+        played_cards = [p.played_hand for p in players]
 
         i = 0
         for player in players:
@@ -54,21 +35,3 @@ class GameData:
         room = self.get_room_stats(room)
         room.played_card = card
         room.save()
-
-    def remove_all_stats(self, room):
-        room_stats = self.get_room_stats(room)
-        players = room_stats.room.players.all()
-
-        for player in players:
-            player.hand = ""
-            player.tricks = 0
-            player.played_hand = ""
-
-        room_stats.board = ""
-        room_stats.trump_card = ""
-        room_stats.team_one_score = 0
-        room_stats.team_two_score = 0
-        room_stats.player_position = 0
-        room_stats.played_card = ""
-        room_stats.save()
-
diff --git a/src/room/templates/room/Room.html b/src/room/templates/room/Room.html
index dc83785..1aca5bb 100644
--- a/src/room/templates/room/Room.html
+++ b/src/room/templates/room/Room.html
@@ -54,7 +54,7 @@
         <div class="row border border-dark">
             <div class="col border border-dark text-center">
                 <h5>{{ player1 }}</h5>
-                {% if permission1 %}
+                {% if request.user == player1 %}
                 <p>cards: {{ player1.hand }}</p>
                 {% else %}
                 <p>CARDS</p>
@@ -65,7 +65,7 @@
         <div class="row">
             <div class="col border border-dark">
                 <h5>{{ player4 }}</h5>
-                {% if permission4 %}
+                {% if request.user == player4 %}
                 <p>cards: {{ player4.hand }}</p>
                 {% else %}
                 <p>CARDS</p>
@@ -84,7 +84,7 @@
             </div>
             <div class="col border border-dark">
                 <h5>{{ player2 }}</h5>
-                {% if permission2 %}
+                {% if request.user == player2 %}
                 <p>cards: {{ player2.hand }}</p>
                 {% else %}
                 <p>CARDS</p>
@@ -95,7 +95,7 @@
         <div class="row border border-dark text-center">
             <div class="col border border-dark">
                 <h5>{{ player3 }}</h5>
-                {% if permission3 %}
+                {% if request.user == player3 %}
                 <p>cards: {{ player3.hand }}</p>
                 {% else %}
                 <p>CARDS</p>
@@ -116,5 +116,5 @@
 </div>
 </div>
 </div>
-<!--<script src="{% static 'js_files/card_room_utilities.js' %}"></script>-->
+<script src="{% static 'js_files/card_room_utilities.js' %}"></script>
 {% endblock %}
diff --git a/src/room/utils.py b/src/room/utils.py
index c6c5252..8e2a4c8 100644
--- a/src/room/utils.py
+++ b/src/room/utils.py
@@ -1,7 +1,7 @@
-from src.room_controller import Controller
-from src.game_logic import GameController
-from src.database_repo import GameData
-from src.validate import ValidateCards
+from room.controllers.room_controller import Controller
+from room.game_logic import GameController
+from room.repos.database_repo import GameData
+from room.validators import ValidateCards
 from functools import cache
 
 
diff --git a/src/room/validators.py b/src/room/validators.py
index b557d11..ad85558 100644
--- a/src/room/validators.py
+++ b/src/room/validators.py
@@ -1,4 +1,4 @@
-from entity import Deck
+from room.entities import Deck
 
 
 class ValidateCards:
diff --git a/src/room/views.py b/src/room/views.py
index 96d2c9c..5e2b4e0 100644
--- a/src/room/views.py
+++ b/src/room/views.py
@@ -1,9 +1,9 @@
+from django.http import Http404
 from django.shortcuts import get_object_or_404, render, redirect
 from django.views.generic import TemplateView, ListView
 from django.contrib.auth.mixins import LoginRequiredMixin, PermissionRequiredMixin
 from rest_framework.generics import RetrieveAPIView
 
-import userauth.models
 from room.models import CardRoom
 from .serializers import RoomSerializer
 from .utils import get_controller
@@ -29,11 +29,10 @@ class Room(LoginRequiredMixin, TemplateView):
             except ValueError:
                 return redirect('the_room', pk=pk)
 
-            card_room_status = self.controller.get_room_status(card_room)
-            players = self.controller.get_players_names(card_room)
+            players = card_room.players.all()
             players_count = self.controller.check_players_num(card_room)
 
-            if players_count == 4 and card_room_status:
+            if players_count == 4 and card_room.status:
                 self.controller.change_status_to_false(card_room)
                 content = {
                     'table_status': False,
@@ -56,7 +55,8 @@ class Room(LoginRequiredMixin, TemplateView):
         elif 'Cancel' in request.POST:
             user = request.user
             self.controller.remove_player(user, card_room)
-            players = self.controller.get_players_names(card_room)
+
+            players = card_room.players.all()
             content = {
                 'table_status': True,
                 'players': players,
@@ -77,33 +77,51 @@ class Room(LoginRequiredMixin, TemplateView):
 
     def get(self, request, pk):
         form = GameForm()
-        # ROOM & PLAYERS & COUNT
+
         card_room = get_object_or_404(CardRoom, pk=pk)
-        players = self.controller.get_players_names(card_room)
-
-        # ROOM & ELEMENTS STATUS
-        card_room_status = self.controller.get_room_status(card_room)
-        register = self.controller.check_user(request.user, card_room)
-        cancel = not register
-        countdown = False
-
-        # THE NAME OF THE VAR DOES NOT MAKE SENSE - AND THE BOOLEAN MUST BE FALSE FIRST
-        # TO MAKE SENSE. CHANGE THIS NEXT TIME YOU WORK.
-        if not card_room_status:
-            content = self.game.run(form, card_room, user=request.user)
-            return render(request, self.template_name, content)
+        players = card_room.players.all()
+        is_registered = self.controller.check_user(request.user, card_room)
+
+        if not card_room.status:
+            self.game.run(card_room, request.user)
+            card_room.refresh_from_db()
+            room_stats = self.game.repository.get_room_stats(card_room)
+
+            context = {
+                # Players
+                'player1': players[0],
+                'player2': players[1],
+                'player3': players[2],
+                'player4': players[3],
+
+                # GAME STATS
+                'board': room_stats.board,
+                'trump_card': room_stats.trump_card,
+                'team_1_score': room_stats.team_one_score,
+                'team_2_score': room_stats.team_two_score,
+
+                # HTML ELEMENTS
+                'table_status': False,
+                'game_status': True,
+                'register': False,
+                'cancel': False,
+                'countdown': False,
+                'timer': "0",
+                'form': form,
+            }
+        else:
+            context = {
+                'players': players,
+                'room_nr': pk,
+                'register': is_registered,
+                'cancel': not is_registered,
+                'countdown': False,
+                'timer': "0",
+                'table_status': card_room.status,
+                'form': form,
+            }
 
-        content = {
-            'form': form,
-            'players': players,
-            'room_nr': pk,
-            'register': register,
-            'cancel': cancel,
-            'countdown': countdown,
-            'timer': "0",
-            'table_status': card_room_status,
-        }
-        return render(request, self.template_name, content)
+        return render(request, self.template_name, context)
 
 
 class CardRooms(LoginRequiredMixin, ListView):
diff --git a/src/tests/test_databse_repo.py b/src/tests/test_databse_repo.py
index 437081d..ff6cf71 100644
--- a/src/tests/test_databse_repo.py
+++ b/src/tests/test_databse_repo.py
@@ -1,5 +1,5 @@
 from room.models import CardRoom
-from src.database_repo import GameData
+from room.repos.database_repo import GameData
 import pytest
 
 
@@ -12,8 +12,7 @@ def test_load_game_stats_when_database_is_empty_returns_default_model_settings(a
 
     assert room_stats['player_pos'] == 0
     assert room_stats['board'] == ""
-    assert room_stats['players_tricks'] == [0]
-    assert room_stats['players_names'] == ['admin']
+    assert room_stats['players'] == ['admin']
 
 
 def test_save_played_card_when_database_receives_data_returns_the_given_data(admin_user):
@@ -40,8 +39,9 @@ def test_save_played_card_when_receiving_new_data_saves_received_data():
     repo = GameData()
     CardRoom.objects.create()
     card_room = CardRoom.objects.all().first()
-    room_stats = repo.get_room_stats(card_room)
 
     card = "Ah"
-    repo.save_played_card(card, room_stats)
+    repo.save_played_card(card, card_room)
+
+    room_stats = repo.get_room_stats(card_room)
     assert room_stats.played_card == "Ah"
diff --git a/src/tests/test_room_controller.py b/src/tests/test_room_controller.py
index 41e9656..553d045 100644
--- a/src/tests/test_room_controller.py
+++ b/src/tests/test_room_controller.py
@@ -1,4 +1,4 @@
-from src.room_controller import Controller
+from room.controllers.room_controller import Controller
 from room.models import CardRoom
 import pytest
 
diff --git a/src/userauth/urls.py b/src/userauth/urls.py
index 8867c75..332e0e0 100644
--- a/src/userauth/urls.py
+++ b/src/userauth/urls.py
@@ -1,5 +1,5 @@
 from django.urls import path
-from . import views
+from userauth import views
 
 
 urlpatterns = [
diff --git a/src/userauth/views.py b/src/userauth/views.py
index 91ea44a..2afbf72 100644
--- a/src/userauth/views.py
+++ b/src/userauth/views.py
@@ -1,3 +1,42 @@
 from django.shortcuts import render
+from django.views.generic import TemplateView
+from django.contrib.auth.views import LoginView, LogoutView
+from django.views.generic.edit import CreateView
+from django.contrib.auth.forms import UserCreationForm
+from django.shortcuts import redirect
 
-# Create your views here.
+
+class LoginInterfaceView(LoginView):
+    template_name = 'userauth/login.html'
+
+    def get(self, request, *args, **kwargs):
+        if self.request.user.is_authenticated:
+            return redirect('home_page')
+        return super().get(request,  *args, **kwargs)
+
+
+class LogoutInterfaceView(LogoutView):
+    template_name = 'userauth/logout.html'
+
+    def get(self, request, *args, **kwargs):
+        if not self.request.user.is_authenticated:
+            return redirect('home_page')
+        return super().get(request,  *args, **kwargs)
+
+
+class SignupInterfaceView(CreateView):
+    form_class = UserCreationForm
+    template_name = 'userauth/register.html'
+    success_url = '/success'
+
+    def get(self, request, *args, **kwargs):
+        if self.request.user.is_authenticated:
+            return redirect('home_page')
+        return super().get(request,  *args, **kwargs)
+
+
+class SuccessRegistration(TemplateView):
+    template_name = 'userauth/success_registration.html'
+
+    def get(self, request):
+        return render(request, self.template_name)
diff --git a/src/website/settings.py b/src/website/settings.py
index e8d84f0..096c452 100644
--- a/src/website/settings.py
+++ b/src/website/settings.py
@@ -9,7 +9,7 @@ https://docs.djangoproject.com/en/3.2/topics/settings/
 For the full list of settings and their values, see
 https://docs.djangoproject.com/en/3.2/ref/settings/
 """
-
+import os
 from pathlib import Path
 
 # Build paths inside the project like this: BASE_DIR / 'subdir'.
@@ -41,10 +41,10 @@ INSTALLED_APPS = [
 
     'rest_framework',
     'corsheaders',
+    'django_extensions',
 
     # Apps
     'home',
-    'registration',
     'userauth',
     'room',
 ]
@@ -68,7 +68,7 @@ TEMPLATES = [
     {
         'BACKEND': 'django.template.backends.django.DjangoTemplates',
         'DIRS': [
-            BASE_DIR / 'src/templates',
+            BASE_DIR / 'website' / 'templates',
         ],
         'APP_DIRS': True,
         'OPTIONS': {
@@ -132,9 +132,9 @@ USE_TZ = True
 # Static files (CSS, JavaScript, Images)
 # https://docs.djangoproject.com/en/3.2/howto/static-files/
 
-STATIC_URL = '/src/'
+STATIC_URL = '/static/'
 STATICFILES_DIRS = [
-    BASE_DIR / 'src',
+    BASE_DIR / 'static',
 ]
 
 # Default primary key field type
diff --git a/src/website/urls.py b/src/website/urls.py
index 8ae8a95..fc2e9bd 100644
--- a/src/website/urls.py
+++ b/src/website/urls.py
@@ -19,6 +19,6 @@ from django.urls import path, include
 urlpatterns = [
     path('admin/', admin.site.urls),
     path('', include('home.urls')),
-    path('', include('registration.urls')),
+    path('', include('userauth.urls')),
     path('', include('room.urls')),
 ]
